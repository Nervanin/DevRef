//
//  ViewController.swift
//  DevRef
//
//  Created by Alex on 24.05.2020.
//  Copyright © 2020 Alex. All rights reserved.
//
import UIKit
import SnapKit

final class ViewController: UIViewController {
    
    private let tableView: UITableView? = UITableView()
    
    private let patterns = [Pattern(title: "Порождающие",
                                    names: ["Фабричный метод","Абстрактная фабрика","Строитель","Прототип","Одиночка"],
                                    
                                    description: ["Фабричный метод - это порождающий паттерн проектирования, который определяет общий интерфейс для создания объектов в суперклассе, позволяя подклассам изменять тип создаваемых объектов.",
                                                  "Абстрактная фабрика — это порождающий паттерн проектирования, который позволяет создавать семейства связанных объектов, не привязываясь к конкретным классам создаваемых объектов.",
                                                  "Строитель - это порождающий паттерн проектирования, который позволяет создавать сложные объекты пошагово. Строитель даёт возможность использовать один и тот же код строительства для получения разных представлений объектов.",
                                                  "Прототип — это порождающий паттерн проектирования, который позволяет копировать объекты, не вдаваясь в подробности их реализации.",
                                                  "Одиночка — это порождающий паттерн проектирования, который гарантирует, что у класса есть только один экземпляр, и предоставляет к нему глобальную точку доступа."]),
                            
                            
                        Pattern(title: "Структурные",
                                names: ["Адаптер","Мост","Компоновщик","Декоратор","Фасад","Легковес","Заместитель"],
                                
                                description: ["Адаптер — это структурный паттерн проектирования, который позволяет объектам с несовместимыми интерфейсами работать вместе.",
                                              "Мост — это структурный паттерн проектирования, который разделяет один или несколько классов на две отдельные иерархии — абстракцию и реализацию, позволяя изменять их независимо друг от друга.",
                                              "Компоновщик— это структурный паттерн проектирования, который позволяет сгруппировать множество объектов в древовидную структуру, а затем работать с ней так, как будто это единичный объект",
                                              "Декоратор — это структурный паттерн проектирования, который позволяет динамически добавлять объектам новую функциональность, оборачивая их в полезные «обёртки».",
                                              "Фасад — это структурный паттерн проектирования, который предоставляет простой интерфейс к сложной системе классов, библиотеке или фреймворку.",
                                              "Легковес — это структурный паттерн проектирования, который позволяет вместить бóльшее количество объектов в отведённую оперативную память. Легковес экономит память, разделяя общее состояние объектов между собой, вместо хранения одинаковых данных в каждом объекте.",
                                              "Заместитель — это структурный паттерн проектирования, который позволяет подставлять вместо реальных объектов специальные объекты-заменители. Эти объекты перехватывают вызовы к оригинальному объекту, позволяя сделать что-то до или после передачи вызова оригиналу."]),
                        
                        Pattern(title: "Поведенческие",
                                names:  ["Цепочка обязанностей","Команда","Итератор","Посредник","Снимок","Наблюдатель","Состояние","Стратегия","Шаблонный метод","Посетитель"],
                                
                                description: ["Цепочка обязанностей — это поведенческий паттерн проектирования, который позволяет передавать запросы последовательно по цепочке обработчиков. Каждый последующий обработчик решает, может ли он обработать запрос сам и стоит ли передавать запрос дальше по цепи.",
                                              "Команда — это поведенческий паттерн проектирования, который превращает запросы в объекты, позволяя передавать их как аргументы при вызове методов, ставить запросы в очередь, логировать их, а также поддерживать отмену операций.",
                                              "Итератор — это поведенческий паттерн проектирования, который даёт возможность последовательно обходить элементы составных объектов, не раскрывая их внутреннего представления.",
                                              "Посредник — это поведенческий паттерн проектирования, который позволяет уменьшить связанность множества классов между собой, благодаря перемещению этих связей в один класс-посредник.",
                                              "Снимок — это поведенческий паттерн проектирования, который позволяет сохранять и восстанавливать прошлые состояния объектов, не раскрывая подробностей их реализации.",
                                              "Наблюдатель — это поведенческий паттерн проектирования, который создаёт механизм подписки, позволяющий одним объектам следить и реагировать на события, происходящие в других объектах.",
                                              "Состояние — это поведенческий паттерн проектирования, который позволяет объектам менять поведение в зависимости от своего состояния. Извне создаётся впечатление, что изменился класс объекта.",
                                              "Стратегия — это поведенческий паттерн проектирования, который определяет семейство схожих алгоритмов и помещает каждый из них в собственный класс, после чего алгоритмы можно взаимозаменять прямо во время исполнения программы.",
                                              "Шаблонный метод — это поведенческий паттерн проектирования, который определяет скелет алгоритма, перекладывая ответственность за некоторые его шаги на подклассы. Паттерн позволяет подклассам переопределять шаги алгоритма, не меняя его общей структуры.",
                                              "Посетитель — это поведенческий паттерн проектирования, который позволяет добавлять в программу новые операции, не изменяя классы объектов, над которыми эти операции могут выполняться."])]
    
    
    private let cellReuseIdentifier = "cell"
    
    override func viewDidLoad() {
        super.viewDidLoad()
        tableView?.dataSource = self
        tableView?.delegate = self
        setupTableView()
    }
    
    private func setupTableView() {
        view.addSubview(tableView!)
        tableView?.snp.makeConstraints { make in
            make.edges.equalToSuperview()
        }
        tableView?.register(UITableViewCell.self, forCellReuseIdentifier: cellReuseIdentifier)
    }
    
}

  extension ViewController: UITableViewDataSource{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return patterns.map{$0}[section].names.count
    }
    
    func numberOfSections(in: UITableView) -> Int {
        return patterns.count
    }
    
    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        return patterns.map{$0}[section].title
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: cellReuseIdentifier, for: indexPath )
        let patternsIteam = patterns.map{$0}[indexPath.section].names[indexPath.row]
       // print(patternsIteam)
//        patternsIteam = "123"
        cell.textLabel?.text = patternsIteam
        cell.imageView?.image = UIImage(named: patternsIteam)
        return cell
        
    }
}

extension ViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let test = patterns.map{$0}[indexPath.section].names[indexPath.row]
        
        
        


        
        let test2 = patterns.map{$0}[indexPath.section].description[indexPath.row]

        
        
        let storyboard = UIStoryboard(name: "DetailsVC", bundle: nil)
        let vc = storyboard.instantiateViewController(identifier: "DetailsVC") as? DetailsVC
//        print("секция \(indexPath.section) строка\(indexPath.row)")
        vc?.detailsLabel.text = test
        
        
        vc!.descriptionPattern.text = test2
        
        self.navigationController?.pushViewController(vc!, animated: true)
    }
}



//open -
//public -
//internal -
//private -
//fileprivate -
